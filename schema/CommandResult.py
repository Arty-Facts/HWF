# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CommandResult(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CommandResult()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCommandResult(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CommandResult
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CommandResult
    def Cmd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommandResult
    def Exit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CommandResult
    def Stdout(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CommandResult
    def StdoutAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CommandResult
    def StdoutLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CommandResult
    def StdoutIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CommandResult
    def Stderr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CommandResult
    def StderrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CommandResult
    def StderrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CommandResult
    def StderrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # CommandResult
    def Os(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommandResult
    def Cpu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommandResult
    def Gpu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommandResult
    def Ram(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommandResult
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(9)
def CommandResultStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCmd(builder, cmd): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmd), 0)
def CommandResultAddCmd(builder, cmd):
    """This method is deprecated. Please switch to AddCmd."""
    return AddCmd(builder, cmd)
def AddExit(builder, exit): builder.PrependInt32Slot(1, exit, 0)
def CommandResultAddExit(builder, exit):
    """This method is deprecated. Please switch to AddExit."""
    return AddExit(builder, exit)
def AddStdout(builder, stdout): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stdout), 0)
def CommandResultAddStdout(builder, stdout):
    """This method is deprecated. Please switch to AddStdout."""
    return AddStdout(builder, stdout)
def StartStdoutVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CommandResultStartStdoutVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStdoutVector(builder, numElems)
def AddStderr(builder, stderr): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stderr), 0)
def CommandResultAddStderr(builder, stderr):
    """This method is deprecated. Please switch to AddStderr."""
    return AddStderr(builder, stderr)
def StartStderrVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CommandResultStartStderrVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStderrVector(builder, numElems)
def AddOs(builder, os): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(os), 0)
def CommandResultAddOs(builder, os):
    """This method is deprecated. Please switch to AddOs."""
    return AddOs(builder, os)
def AddCpu(builder, cpu): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(cpu), 0)
def CommandResultAddCpu(builder, cpu):
    """This method is deprecated. Please switch to AddCpu."""
    return AddCpu(builder, cpu)
def AddGpu(builder, gpu): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(gpu), 0)
def CommandResultAddGpu(builder, gpu):
    """This method is deprecated. Please switch to AddGpu."""
    return AddGpu(builder, gpu)
def AddRam(builder, ram): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ram), 0)
def CommandResultAddRam(builder, ram):
    """This method is deprecated. Please switch to AddRam."""
    return AddRam(builder, ram)
def AddTime(builder, time): builder.PrependInt32Slot(8, time, 0)
def CommandResultAddTime(builder, time):
    """This method is deprecated. Please switch to AddTime."""
    return AddTime(builder, time)
def End(builder): return builder.EndObject()
def CommandResultEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)