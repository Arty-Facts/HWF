# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers

class Task(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTask(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Task()
        x.Init(buf, n + offset)
        return x

    # Task
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Task
    def Stages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Stage import Stage
            obj = Stage()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Task
    def StagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Task
    def Artifacts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Task
    def ArtifactsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def TaskStart(builder): builder.StartObject(2)
def TaskAddStages(builder, stages): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stages), 0)
def TaskStartStagesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskAddArtifacts(builder, artifacts): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(artifacts), 0)
def TaskStartArtifactsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskEnd(builder): return builder.EndObject()
