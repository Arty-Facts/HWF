"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Message = void 0;
var flatbuffers = require("flatbuffers");
var Message = /** @class */ (function () {
    function Message() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Message.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Message.getRootAsMessage = function (bb, obj) {
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Message.getSizePrefixedRootAsMessage = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Message.prototype.agentId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Message.prototype.cmd = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Message.prototype.data = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Message.prototype.dataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Message.prototype.dataArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Message.startMessage = function (builder) {
        builder.startObject(3);
    };
    Message.addAgentId = function (builder, agentId) {
        builder.addFieldInt32(0, agentId, 0);
    };
    Message.addCmd = function (builder, cmdOffset) {
        builder.addFieldOffset(1, cmdOffset, 0);
    };
    Message.addData = function (builder, dataOffset) {
        builder.addFieldOffset(2, dataOffset, 0);
    };
    Message.createDataVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Message.startDataVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Message.endMessage = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Message.finishMessageBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    Message.finishSizePrefixedMessageBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    Message.createMessage = function (builder, agentId, cmdOffset, dataOffset) {
        Message.startMessage(builder);
        Message.addAgentId(builder, agentId);
        Message.addCmd(builder, cmdOffset);
        Message.addData(builder, dataOffset);
        return Message.endMessage(builder);
    };
    return Message;
}());
exports.Message = Message;
