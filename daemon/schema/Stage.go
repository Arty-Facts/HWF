// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Stage struct {
	_tab flatbuffers.Table
}

func GetRootAsStage(buf []byte, offset flatbuffers.UOffsetT) *Stage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Stage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStage(buf []byte, offset flatbuffers.UOffsetT) *Stage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Stage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Stage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Stage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Stage) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Stage) Data(obj *Data, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Stage) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Stage) CmdList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Stage) CmdListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Stage) TrackTime() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *Stage) MutateTrackTime(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *Stage) TrackRam() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Stage) MutateTrackRam(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *Stage) TrackCpu() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Stage) MutateTrackCpu(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *Stage) TrackGpu() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Stage) MutateTrackGpu(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *Stage) Comment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StageStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func StageAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func StageAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func StageStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StageAddCmdList(builder *flatbuffers.Builder, cmdList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(cmdList), 0)
}
func StageStartCmdListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StageAddTrackTime(builder *flatbuffers.Builder, trackTime bool) {
	builder.PrependBoolSlot(3, trackTime, true)
}
func StageAddTrackRam(builder *flatbuffers.Builder, trackRam bool) {
	builder.PrependBoolSlot(4, trackRam, false)
}
func StageAddTrackCpu(builder *flatbuffers.Builder, trackCpu bool) {
	builder.PrependBoolSlot(5, trackCpu, false)
}
func StageAddTrackGpu(builder *flatbuffers.Builder, trackGpu bool) {
	builder.PrependBoolSlot(6, trackGpu, false)
}
func StageAddComment(builder *flatbuffers.Builder, comment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(comment), 0)
}
func StageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
