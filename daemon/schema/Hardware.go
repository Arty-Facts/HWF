// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Hardware struct {
	_tab flatbuffers.Table
}

func GetRootAsHardware(buf []byte, offset flatbuffers.UOffsetT) *Hardware {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Hardware{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Hardware) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Hardware) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Hardware) Cpu() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Hardware) Gpu() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Hardware) Os() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func HardwareStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func HardwareAddCpu(builder *flatbuffers.Builder, cpu flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cpu), 0)
}
func HardwareAddGpu(builder *flatbuffers.Builder, gpu flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(gpu), 0)
}
func HardwareAddOs(builder *flatbuffers.Builder, os flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(os), 0)
}
func HardwareEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
